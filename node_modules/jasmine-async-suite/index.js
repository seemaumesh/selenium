'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var invariant = require('invariant');

var oldJasmineFns = { it: it, fit: fit, xit: xit, beforeEach: beforeEach, afterEach: afterEach, beforeAll: beforeAll, afterAll: afterAll };

function isFunction(obj) {
  return typeof obj === 'function';
}

function withAsync(fns) {
  return Object.keys(fns).reduce(function (memo, name) {
    memo[name] = fns[name];
    memo[name].async = function () {
      var _this = this;

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var callback = args.pop();
      invariant(isFunction(callback), name + ' must be provided a function!');
      return fns[name].apply(fns, args.concat([function (done) {
        var promise = callback.call(_this);
        invariant(promise && isFunction(promise.then), name + ' must return a promise!');
        promise.then(done, done.fail);
      }]));
    };
    return memo;
  }, {});
}

module.exports = {
  install: function install() {
    _extends(global, _extends({}, withAsync(oldJasmineFns)));
  },
  uninstall: function uninstall() {
    _extends(global, oldJasmineFns);
  }
};